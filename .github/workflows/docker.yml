name: Build and Push Docker Image

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop

env:
  REGISTRY_GHCR: ghcr.io
  REGISTRY_DOCKERHUB: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    name: Lint Python Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Configuration de Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Installation des dépendances de linting
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint black isort
          pip install -r web-app/requirements.txt

      - name: Linting avec flake8
        run: |
          flake8 web-app/ --count --select=E9,F63,F7,F82 \
            --show-source --statistics
          flake8 web-app/ --count --exit-zero --max-complexity=10 \
            --max-line-length=127 --statistics

      - name: Linting avec pylint
        run: |
          pylint web-app/ --exit-zero --rcfile=.pylintrc || true
        continue-on-error: true

      - name: Vérification du formatage avec black
        run: |
          black --check --diff web-app/
        continue-on-error: true

      - name: Vérification des imports avec isort
        run: |
          isort --check-only --diff web-app/
        continue-on-error: true

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: lint
    if: github.event_name == 'push'

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Configuration de Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Connexion à GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Connexion à Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extraction des métadonnées
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}
          tags: |
            type=ref,event=tag
            type=raw,value=unstable,enable={{is_default_branch}}
            type=raw,value=unstable-{{branch}},disable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Construction et publication de l'image Docker
        uses: docker/build-push-action@v5
        with:
          context: ./web-app
          file: ./web-app/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Résumé de l'image construite
        run: |
          echo "## 🐳 Image Docker construite et publiée" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags créés:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Registres:**" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 GHCR: ghcr.io/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🐋 Docker Hub: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY

  test-image:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push'

    steps:
      - name: Connexion à GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: downcase REPO
        run: |
          echo "IMG=${IMAGE_NAME@L}" >> "${GITHUB_ENV}"

      - name: Test de l'image Docker
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            TAG=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            TAG="unstable"
          else
            BRANCH=${GITHUB_REF#refs/heads/}
            TAG="unstable-${BRANCH}"
          fi

          echo "Test de l'image avec le tag: $TAG"

          docker run -d --name test-container -p 5000:5000 \
            ${{ env.REGISTRY_GHCR }}/${{ env.IMG }}:$TAG

          sleep 30

          curl -f http://localhost:5000/api/health || exit 1

          docker stop test-container
          docker rm test-container

          echo "✅ Test de l'image réussi!"